name: AI Application Security Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

# Even with these permissions, we'll also use a PAT for backup
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Identify application directory
        id: app_dir
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF}
          echo "Analyzing branch: $BRANCH_NAME"
          
          # Extract parts from branch name if it follows our convention
          if [[ $BRANCH_NAME =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}/[^/]+/[^/]+$ ]]; then
            DATE=$(echo $BRANCH_NAME | cut -d'/' -f1)
            USERNAME=$(echo $BRANCH_NAME | cut -d'/' -f2)
            APP_NAME=$(echo $BRANCH_NAME | cut -d'/' -f3)
            
            echo "APP_PATH=$DATE/$USERNAME/$APP_NAME" >> $GITHUB_ENV
            echo "APP_IDENTIFIED=true" >> $GITHUB_ENV
          else
            # For manual runs or other branches, scan entire repo
            echo "APP_PATH=." >> $GITHUB_ENV
            echo "APP_IDENTIFIED=false" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Dependency vulnerability scan
        if: ${{ env.APP_IDENTIFIED == 'true' && success() }}
        run: |
          APP_PATH=${{ env.APP_PATH }}
          
          # Check for package.json
          if [ -f "$APP_PATH/package.json" ]; then
            echo "## Scanning Node.js dependencies for vulnerabilities"
            cd $APP_PATH
            
            # Install npm-audit-html to get a nice report
            npm install -g npm-audit-html
            
            # Run npm audit and save results
            npm audit --json > npm-audit.json || true
            
            # Generate HTML report
            cat npm-audit.json | npm-audit-html > npm-audit-report.html
            
            # Summary for GitHub comment
            echo "## NPM Security Scan Summary" > $GITHUB_WORKSPACE/security-summary.md
            echo "" >> $GITHUB_WORKSPACE/security-summary.md
            
            # Extract vulnerability counts
            CRITICAL=$(cat npm-audit.json | grep -o '"critical":[0-9]*' | cut -d':' -f2 || echo "0")
            HIGH=$(cat npm-audit.json | grep -o '"high":[0-9]*' | cut -d':' -f2 || echo "0")
            MODERATE=$(cat npm-audit.json | grep -o '"moderate":[0-9]*' | cut -d':' -f2 || echo "0")
            LOW=$(cat npm-audit.json | grep -o '"low":[0-9]*' | cut -d':' -f2 || echo "0")
            
            echo "### Vulnerability Summary" >> $GITHUB_WORKSPACE/security-summary.md
            echo "" >> $GITHUB_WORKSPACE/security-summary.md
            echo "- Critical: $CRITICAL" >> $GITHUB_WORKSPACE/security-summary.md
            echo "- High: $HIGH" >> $GITHUB_WORKSPACE/security-summary.md
            echo "- Moderate: $MODERATE" >> $GITHUB_WORKSPACE/security-summary.md
            echo "- Low: $LOW" >> $GITHUB_WORKSPACE/security-summary.md
            echo "" >> $GITHUB_WORKSPACE/security-summary.md
            
            # Store for later steps
            echo "SECURITY_REPORT_PATH=$GITHUB_WORKSPACE/security-summary.md" >> $GITHUB_ENV
            echo "VULNERABILITIES_FOUND=$((CRITICAL + HIGH))" >> $GITHUB_ENV
          else
            echo "No package.json found in $APP_PATH. Skipping dependency scan."
            echo "## Security Scan" > $GITHUB_WORKSPACE/security-summary.md
            echo "" >> $GITHUB_WORKSPACE/security-summary.md
            echo "No package.json found. Dependency scanning was skipped." >> $GITHUB_WORKSPACE/security-summary.md
            echo "SECURITY_REPORT_PATH=$GITHUB_WORKSPACE/security-summary.md" >> $GITHUB_ENV
            echo "VULNERABILITIES_FOUND=0" >> $GITHUB_ENV
          fi
        continue-on-error: true

      - name: Static code analysis
        if: ${{ env.APP_IDENTIFIED == 'true' && success() }}
        run: |
          APP_PATH=${{ env.APP_PATH }}
          
          # Install ESLint globally
          npm install -g eslint eslint-plugin-react eslint-plugin-security
          
          # Create basic ESLint config if necessary
          cat > eslint-security.json << EOL
          {
            "plugins": ["security"],
            "extends": ["plugin:security/recommended"]
          }
          EOL
          
          # Find JS/TS files
          JSFILES=$(find $APP_PATH -type f -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | grep -v "node_modules" | grep -v "build" || echo "")
          
          if [ ! -z "$JSFILES" ]; then
            echo "## Static Code Analysis" >> $GITHUB_WORKSPACE/security-summary.md
            echo "" >> $GITHUB_WORKSPACE/security-summary.md
            
            # Run ESLint with security plugin
            eslint -c eslint-security.json $JSFILES -f json > eslint-results.json || true
            
            # Count security issues
            SECURITY_ISSUES=$(cat eslint-results.json | grep -c "security/" || echo "0")
            
            echo "### Potential Security Issues Found: $SECURITY_ISSUES" >> $GITHUB_WORKSPACE/security-summary.md
            echo "" >> $GITHUB_WORKSPACE/security-summary.md
            
            if [ $SECURITY_ISSUES -gt 0 ]; then
              echo "**Warning: Potential security issues were found in the code.**" >> $GITHUB_WORKSPACE/security-summary.md
              echo "" >> $GITHUB_WORKSPACE/security-summary.md
              echo "Common issues to look for:" >> $GITHUB_WORKSPACE/security-summary.md
              echo "- Injection vulnerabilities" >> $GITHUB_WORKSPACE/security-summary.md
              echo "- Insecure randomness" >> $GITHUB_WORKSPACE/security-summary.md
              echo "- Unsafe regular expressions" >> $GITHUB_WORKSPACE/security-summary.md
              echo "- Unvalidated redirects" >> $GITHUB_WORKSPACE/security-summary.md
            else
              echo "No security issues were found in static code analysis." >> $GITHUB_WORKSPACE/security-summary.md
            fi
          fi
        continue-on-error: true

      - name: Post security scan results
        if: always()
        uses: actions/github-script@v6
        with:
          # Use a personal access token with proper permissions if available
          github-token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let securityReport = '';
            const securityReportPath = process.env.SECURITY_REPORT_PATH;
            
            if (fs.existsSync(securityReportPath)) {
              securityReport = fs.readFileSync(securityReportPath, 'utf8');
            } else {
              securityReport = "### Security Scan\n\nSecurity scan could not be completed.";
            }
            
            const vulnerabilities = parseInt(process.env.VULNERABILITIES_FOUND || '0');
            let securityLevel = '✅ SECURE';
            
            if (vulnerabilities > 10) {
              securityLevel = '❌ HIGH RISK';
            } else if (vulnerabilities > 0) {
              securityLevel = '⚠️ ATTENTION NEEDED';
            }
            
            const body = `# AI App Security Scan Results: ${securityLevel}\n\n${securityReport}\n\n> This security scan was automatically generated by GitHub Actions workflow.\n\n> Note: This is an automated scan and may report false positives. Human review is still necessary.`;
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.error('Failed to create comment:', error.message);
            } 