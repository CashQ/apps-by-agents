name: AI App Preview and Rules Enforcement

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-submission:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate AI agent contribution
        id: validate
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF}
          echo "Validating branch: $BRANCH_NAME"
          
          # Check branch naming convention
          if ! [[ $BRANCH_NAME =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}/[^/]+/[^/]+$ ]]; then
            echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
            echo "VALIDATION_MESSAGE=❌ Branch naming doesn't follow the pattern YYYY-MM-DD/username/app-name" >> $GITHUB_ENV
            exit 1
          fi
          
          # Extract parts from branch name
          DATE=$(echo $BRANCH_NAME | cut -d'/' -f1)
          USERNAME=$(echo $BRANCH_NAME | cut -d'/' -f2)
          APP_NAME=$(echo $BRANCH_NAME | cut -d'/' -f3)
          
          # Check directory structure
          if [ ! -d "$DATE/$USERNAME/$APP_NAME" ]; then
            echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
            echo "VALIDATION_MESSAGE=❌ Directory structure does not match branch name. Expected: $DATE/$USERNAME/$APP_NAME" >> $GITHUB_ENV
            exit 1
          fi
          
          # Check README exists
          if [ ! -f "$DATE/$USERNAME/$APP_NAME/README.md" ]; then
            echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
            echo "VALIDATION_MESSAGE=❌ README.md is missing from the project directory" >> $GITHUB_ENV
            exit 1
          fi
          
          # Check README mentions AI
          if ! grep -q -i "AI\|agent\|generated\|created" "$DATE/$USERNAME/$APP_NAME/README.md"; then
            echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
            echo "VALIDATION_MESSAGE=❌ README.md should acknowledge that the application was created by an AI agent" >> $GITHUB_ENV
            exit 1
          fi
          
          # Check if package.json exists (for most projects)
          if [ ! -f "$DATE/$USERNAME/$APP_NAME/package.json" ]; then
            echo "WARNING_MESSAGE=⚠️ No package.json found. If this is intentional, please explain in the PR description." >> $GITHUB_ENV
          fi
          
          # Store app path for future steps
          echo "APP_PATH=$DATE/$USERNAME/$APP_NAME" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        continue-on-error: true

      - name: Post validation results
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const validationFailed = process.env.VALIDATION_FAILED === 'true';
            const validationMessage = process.env.VALIDATION_MESSAGE || '✅ All validation checks passed';
            const warningMessage = process.env.WARNING_MESSAGE || '';
            
            let body = `## AI Agent Contribution Validation\n\n${validationMessage}\n\n`;
            
            if (warningMessage) {
              body += `${warningMessage}\n\n`;
            }
            
            if (!validationFailed) {
              body += `### Congratulations! 🎉\n\nYour AI-generated app submission looks good and follows our repository guidelines.`;
            } else {
              body += `### Please Fix Issues 🛠️\n\nYour AI-generated app submission needs some adjustments to meet our repository guidelines.`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            
            if (validationFailed) {
              core.setFailed(validationMessage);
            }

  generate-preview:
    runs-on: ubuntu-latest
    needs: validate-submission
    if: ${{ !failure() && !cancelled() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Detect app type and generate preview
        id: preview
        run: |
          APP_PATH=${{ env.APP_PATH }}
          APP_NAME=${{ env.APP_NAME }}
          
          # Determine app type based on files
          if [ -f "$APP_PATH/package.json" ]; then
            cd $APP_PATH
            
            # Check if it's a React app
            if grep -q "react" "package.json"; then
              echo "Detected React application"
              
              # Generate app screenshot or preview
              if [ -f "src/App.js" ] || [ -f "src/App.tsx" ]; then
                echo "PREVIEW_TYPE=react" >> $GITHUB_ENV
                
                # Install dependencies
                npm install --silent
                
                # Generate a static build if possible
                if grep -q "build" "package.json"; then
                  npm run build
                  echo "PREVIEW_GENERATED=true" >> $GITHUB_ENV
                  echo "PREVIEW_PATH=build" >> $GITHUB_ENV
                fi
              fi
            fi
          fi
          
          # Create preview info
          echo "## App Preview Information" > preview_info.md
          echo "" >> preview_info.md
          echo "### $APP_NAME" >> preview_info.md
          echo "" >> preview_info.md
          echo "**Created by AI in:** \`$APP_PATH\`" >> preview_info.md
          echo "" >> preview_info.md
          
          # Add details from package.json if it exists
          if [ -f "$APP_PATH/package.json" ]; then
            echo "#### Dependencies" >> preview_info.md
            echo "" >> preview_info.md
            echo '```' >> preview_info.md
            jq '.dependencies' "$APP_PATH/package.json" >> preview_info.md
            echo '```' >> preview_info.md
          fi
          
          # List main files
          echo "#### Main Files" >> preview_info.md
          echo "" >> preview_info.md
          echo '```' >> preview_info.md
          find "$APP_PATH" -type f -not -path "*/node_modules/*" -not -path "*/\.*" | sort | head -n 20 >> preview_info.md
          echo '```' >> preview_info.md
          
          echo "PREVIEW_INFO_PATH=preview_info.md" >> $GITHUB_ENV
        continue-on-error: true

      - name: Post preview comment
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let previewInfoContent = '';
            const previewInfoPath = process.env.PREVIEW_INFO_PATH;
            
            if (fs.existsSync(previewInfoPath)) {
              previewInfoContent = fs.readFileSync(previewInfoPath, 'utf8');
            } else {
              previewInfoContent = "### Preview Information\n\nCould not generate preview for this application.";
            }
            
            const body = `# AI-Generated App Preview\n\n${previewInfoContent}\n\n> This preview was automatically generated by the GitHub Actions workflow.\n\n> Repository maintainers: Please review this AI-generated application for quality and security before merging.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            }); 