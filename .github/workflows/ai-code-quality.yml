name: AI Code Quality Assessment

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  ai-code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Identify application directory
        id: app_dir
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF}
          echo "Analyzing branch: $BRANCH_NAME"
          
          # Extract parts from branch name if it follows our convention
          if [[ $BRANCH_NAME =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}/[^/]+/[^/]+$ ]]; then
            DATE=$(echo $BRANCH_NAME | cut -d'/' -f1)
            USERNAME=$(echo $BRANCH_NAME | cut -d'/' -f2)
            APP_NAME=$(echo $BRANCH_NAME | cut -d'/' -f3)
            
            echo "APP_PATH=$DATE/$USERNAME/$APP_NAME" >> $GITHUB_ENV
            echo "APP_IDENTIFIED=true" >> $GITHUB_ENV
          else
            # For manual runs or other branches, scan entire repo
            echo "APP_PATH=." >> $GITHUB_ENV
            echo "APP_IDENTIFIED=false" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Code quality assessment
        if: ${{ env.APP_IDENTIFIED == 'true' && success() }}
        run: |
          APP_PATH=${{ env.APP_PATH }}
          
          # Initialize assessment report
          echo "# AI Code Quality Assessment" > code-quality.md
          echo "" >> code-quality.md
          echo "## Application: $(basename $APP_PATH)" >> code-quality.md
          echo "" >> code-quality.md
          
          # Check for basic project files
          echo "### Project Structure" >> code-quality.md
          echo "" >> code-quality.md
          echo "| File Check | Status |" >> code-quality.md
          echo "|------------|--------|" >> code-quality.md
          
          # Check for README
          if [ -f "$APP_PATH/README.md" ]; then
            echo "| README.md | ✅ Present |" >> code-quality.md
          else
            echo "| README.md | ❌ Missing |" >> code-quality.md
          fi
          
          # Check for package.json
          if [ -f "$APP_PATH/package.json" ]; then
            echo "| package.json | ✅ Present |" >> code-quality.md
          else
            echo "| package.json | ❌ Missing |" >> code-quality.md
          fi
          
          # Check for .gitignore
          if [ -f "$APP_PATH/.gitignore" ]; then
            echo "| .gitignore | ✅ Present |" >> code-quality.md
          else
            echo "| .gitignore | ⚠️ Missing |" >> code-quality.md
          fi
          
          # Count files by type
          echo "" >> code-quality.md
          echo "### Project Composition" >> code-quality.md
          echo "" >> code-quality.md
          echo "| File Type | Count |" >> code-quality.md
          echo "|-----------|-------|" >> code-quality.md
          
          # JavaScript files
          JS_COUNT=$(find "$APP_PATH" -type f -name "*.js" | grep -v "node_modules" | grep -v "build" | wc -l)
          echo "| JavaScript | $JS_COUNT |" >> code-quality.md
          
          # TypeScript files
          TS_COUNT=$(find "$APP_PATH" -type f -name "*.ts" -o -name "*.tsx" | grep -v "node_modules" | grep -v "build" | wc -l)
          echo "| TypeScript | $TS_COUNT |" >> code-quality.md
          
          # CSS files
          CSS_COUNT=$(find "$APP_PATH" -type f -name "*.css" -o -name "*.scss" -o -name "*.sass" | grep -v "node_modules" | grep -v "build" | wc -l)
          echo "| CSS/SCSS | $CSS_COUNT |" >> code-quality.md
          
          # HTML files
          HTML_COUNT=$(find "$APP_PATH" -type f -name "*.html" -o -name "*.htm" | grep -v "node_modules" | grep -v "build" | wc -l)
          echo "| HTML | $HTML_COUNT |" >> code-quality.md
          
          # Check package.json for dependencies
          if [ -f "$APP_PATH/package.json" ]; then
            echo "" >> code-quality.md
            echo "### Dependencies" >> code-quality.md
            echo "" >> code-quality.md
            
            DEP_COUNT=$(cat "$APP_PATH/package.json" | grep -o '"dependencies"' | wc -l)
            DEV_DEP_COUNT=$(cat "$APP_PATH/package.json" | grep -o '"devDependencies"' | wc -l)
            
            echo "- Regular dependencies: $DEP_COUNT" >> code-quality.md
            echo "- Development dependencies: $DEV_DEP_COUNT" >> code-quality.md
          fi
          
          # Code complexity analysis
          echo "" >> code-quality.md
          echo "### Code Overview" >> code-quality.md
          echo "" >> code-quality.md
          
          # Find the 3 largest code files
          echo "Largest files:" >> code-quality.md
          echo "" >> code-quality.md
          echo "```" >> code-quality.md
          find "$APP_PATH" -type f -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | grep -v "node_modules" | grep -v "build" | xargs wc -l 2>/dev/null | sort -nr | head -3 >> code-quality.md
          echo "```" >> code-quality.md
          
          # AI Assessment
          echo "" >> code-quality.md
          echo "### AI Code Generation Assessment" >> code-quality.md
          echo "" >> code-quality.md
          echo "This assessment evaluates common patterns in AI-generated code:" >> code-quality.md
          echo "" >> code-quality.md
          echo "| Pattern | Assessment |" >> code-quality.md
          echo "|---------|------------|" >> code-quality.md
          
          # Check for commented code (common in AI-generated code)
          COMMENTED_CODE=$(find "$APP_PATH" -type f -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | grep -v "node_modules" | grep -v "build" | xargs grep -l "// Commented" 2>/dev/null | wc -l)
          if [ $COMMENTED_CODE -gt 0 ]; then
            echo "| Commented code blocks | ⚠️ Found in $COMMENTED_CODE files |" >> code-quality.md
          else
            echo "| Commented code blocks | ✅ None found |" >> code-quality.md
          fi
          
          # Check for placeholder TODOs (common in AI-generated code)
          TODOS=$(find "$APP_PATH" -type f -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | grep -v "node_modules" | grep -v "build" | xargs grep -l "TODO" 2>/dev/null | wc -l)
          if [ $TODOS -gt 0 ]; then
            echo "| TODO comments | ⚠️ Found in $TODOS files |" >> code-quality.md
          else
            echo "| TODO comments | ✅ None found |" >> code-quality.md
          fi
          
          # Check for consistent naming conventions
          echo "| Naming conventions | ℹ️ Manual review needed |" >> code-quality.md
          
          # Check for error handling
          ERROR_HANDLING=$(find "$APP_PATH" -type f -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | grep -v "node_modules" | grep -v "build" | xargs grep -l "try {" 2>/dev/null | wc -l)
          if [ $ERROR_HANDLING -gt 0 ]; then
            echo "| Error handling | ✅ Found in $ERROR_HANDLING files |" >> code-quality.md
          else
            echo "| Error handling | ⚠️ Limited or not found |" >> code-quality.md
          fi
          
          echo "QUALITY_REPORT_PATH=code-quality.md" >> $GITHUB_ENV
        continue-on-error: true

      - name: Post code quality results
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let qualityReport = '';
            const qualityReportPath = process.env.QUALITY_REPORT_PATH;
            
            if (fs.existsSync(qualityReportPath)) {
              qualityReport = fs.readFileSync(qualityReportPath, 'utf8');
            } else {
              qualityReport = "### Code Quality Assessment\n\nAssessment could not be completed.";
            }
            
            const body = `# AI Code Quality Report\n\n${qualityReport}\n\n> This assessment was automatically generated to help reviewers evaluate the AI-generated code.\n\n> Note: This is an automated assessment and should be supplemented with human review.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            }); 